Quando fazer um banco de dados, tenha certeza de 'amarrar' os dados para que não haja possibilidade de excluir fácil

04/10/2024
BANCO DE DADOS - mySQL

AULA 405 - O QUE É?
SQL - Linguagem de consulta estruturada
É uma linguagem declarativa. -> especifica o dado quer obter ou modificar e não
como sistema deve executar a operação
Por meio dela, pode-se manipular, ler, criar, atualizar, excluir, recuperar,controlar dados por meio do SGBD.

Há subcategorias do SQL
-DDL
-DML
-DCL
-DTL
-DQL

DEPOIS DE UMA OLHADA NO ACID: Atomicidade, consistência, isolamento e durabilidade

Relação entre SQL e MySQL
SQL é a linguagem utilizada para interagir com bancos de dados relacionais, enquanto MySQL é um dos vários 
SGBDRs que implementam essa linguagem.


SQL é a linguagem padrão para gerenciar e manipular bancos de dados relacionais.
MySQL é um sistema de gerenciamento de banco de dados relacional que utiliza SQL para interagir com os dados, 
oferecendo uma solução robusta, escalável e de código aberto para armazenar e gerenciar informações.


O QUE SÃO TABELAS? São unidades de armazenamento que possui um número linhas de dados/de registros.
Armazenamento de mídia -> não há armazenamento, e sim o nome do arquivo digital e sua extensão para que a própria aplicação se
encarregue de procucar e dar o que a pessoa quer.

TIPOS DE DADOS - PRIMITIVOS

Campos de texto
	-TEXT(tamanho variável que armazena uma grande quantidade de caracteres)
	-VARCHAR(tamanho variável que armazena de 0 até 255 caracteres)
	-CHAR(tamanho fixo que armazena de 0 até 255 caracteres)

Campos numéricos
	-INT
	-FLOAT
	-DECIMAL

Campos de data e hora
	-DATE(formato ano,mês,dia)
	-TIME
	-DATETIME


ARQUIVOS DE MÍDIA ARMAZENAMOS A SEU ENDEREÇO PARA QUE QUANDO NECESSÁRIO O BANCO PUXE


CHAR X VARCHAR

char é um comprimento fixo, o que não for utilizado é preenchido com espaços em branco;

**IMAGINE ESSES UNDERLINES COMO ESPAÇOS DE MEMÓRIA

CHAR - 6 posições - Tamanho fixo
JORGE
_ _ _ _ _ _ 

Jorge está ocupando apenas 5, 1 ficará sobrando e será preenchido com espaço em branco.

Desvantagem: Em grandes quantidades desse caso, ocasiona reservas de espaço de forma desnecessário.
Vantagem: Pesquisa mais rápido


VARCHAR - 6 posiçoes - Tamanho variável

Vantagem: Apesar de ter declarado 6 posições, o nome só ocupará 5 e não ocupará um espaço em branco, ou seja,
ocupa o espaço necessário e libera o resto.
Desvantagem: Por ser de tamanho variável possui um meta dado com uma instrução
de finalização do texto, o que produz lentidão em pesquisas, mas imperceptível praticamente.



AULA 412 - RENOMEANDO TABELAS
sintaxe:
rename <nome_da_tabela> to <novo_nome>;


_____________________________


AULA 413 - INCLUINDO,EDITANDO E REMOVENDO COLUNAS DE TABELA (ALTER TABLE)

ADD - Inclusão de coluna na tabela.
EX.:  alter table curso_udemy add column turno char(5);##adicionando coluna

CHANGE - Alteração do nome de uma coluna e de suas propriedades, como o tipo.
EX.: 

alter table curso_udemy change nome_curso n_curso char(60);##alterando
alter table curso_udemy change n_curso nome_curso char(50);##voltando ao normal

**PERCEBA QUE A PARTIR DO NOME DA COLUNA JÁ COMEÇA A MUDANÇA.

DROP - Remover
EX.: alter table curso_udemy drop nome_curso;


________________

AULA 414 - INSERT

EX.: 
insert into curso_udemy(id_curso,nome_curso,imagem_curso, data_cadastro,investimento)
value(1,'ADS','urusei_yatsura.jpg','2024-10-08',1500.82);

--> o primeiro parêntese é as colunas que serão preenchidas, aqui não importa a ordem.
--> o segundo, sim, importa a ordem, pois é os registros de acordo com o primeiro.


________________

AULA 415 - SELECT
sintaxe:
SELECT <colunas> FROM <nome_da_tabela>


FILTROS -> servem para especificar quais registros queremos e formar uma informação 
Where <- onde

SELECT id_curso,nome_curso from tb_curso WHERE investimento <500 and carga-horaria > 30
------->operadores de comparação
= (igual a)
<> ou != (diferente)

______________________________________________________________________________
LIKE (usado para buscar padrões, especialmente dentro de uma coluna textual)
Ex.:    SELECT * FROM cursos WHERE nome_curso LIKE 'Curso%';  -- Cursos que começam com "Curso"

O uso do like vem junto com caracteres curingas
% (indica que pode haver a existência de um conjunto de caracteres antes ou depois)
_ (indica que pode haver a existência de um ou mais caracteres em uma posição ESPECÍFICA do texto)

Exs:
where nome like '%e' <- filtro para nomes que terminam com a letra 'e'. O % indica um conjunto de caracteres antes da letra.
where nome like 'e%' <- começa com a letra e minúscula
where nome like '%a%'<- encontrar nomes que possua a letra a e antes e depois há conjunto de caracteres


where nome like '_riel' <-nomes que tenham riel e um caractere antes.
where nome like '_ru_' <- um caractere antes e depois
where nome like 'I__' <- começa com a letra I e depois há duas letras apenas


E claro, pode fundir

where nome like '%tt_' <-- termina com tt e um caractere qualquer. 
______________________________________________________________________________
BETWEEN ... AND ... (especificar um intervalo de valores)
Ex.:    SELECT * FROM cursos WHERE investimento BETWEEN 200 AND 300

******Pode ser datas também
Ex.:    SELECT * FROM cursos WHERE data_inicio BETWEEN '2018-10-10' AND '2019-06-06'


____________________________________
IN (usado para verificar se um valor está dentro de um conjunto e após confirmar ele trás os registros)
Ex.: 	SELECT *FROM cursos WHERE id_curso in (1,2,3)
	select nome from animes where nota in (8.5);
	**pode colocar com operadores lógicos também
	select nome from anime where nota in (8.5) and genero in...

Há também o NOT IN, que faz o oposto 


_____________________________________


IS NULL(verifica se um campo é nulo)
Ex.: 	SELECT * FROM cursos WHERE data_cadastro IS NULL;

IS NOT NULL
Ex.: 	SELECT * FROM cursos WHERE data_cadastro IS NOT NULL;


IF (especifica uma condição para o select)
Ex.: SELECT IF(investimento > 300, 'Caro', 'Barato') AS preco_categoria FROM cursos;

------->operadores lógicos

AND (todas as comparações devem ser verdadeiras para retornar algo)
OR (pelo menos uma delas devem ser verdadeiras)

Ex.: 	select nome from animes where nota >=8.8 and ano_lancamento > 2012 and numero_episodios > 20 ;
**todas tem que ser verdadeiras

Ex.: 	select nome from animes where numero_episodios between 100 and 300;




A consulta por si só varre todos os campos da tabela






RESULTADOS FIXOS E VARIÁVEIS

Enum x Char x Set

Enum -> somente o que foi passado na criação da tabela poderá ser utilizado e somente um resultado é utilizado
Char 
Set -> há opções, tem que utilizar, mas pode mais de uma 

Ex:

create table teste(
	preferencias set('musica','cinema','esporte')
	situacao enum('ativo','inativo')
	uf char(2)
)

insert into teste (preferencias,situacao,uf) 
values('musica,livro','inativo','DF'), 
('cinema','ativo','MG') #perceba que o set pode mais de uma opção, o enum é mais fechado e o char é fixo



INNER JOIN
Essencial para cruzar informações, para combinar dados de múltiplas tabelas em uma base de dados relacional, 
especialmente quando as tabelas estão relacionadas por chaves primárias e estrangeiras. 

sintaxe:
 	SELECT colunas #colunas que você quer que apareça
	FROM tabela1 	#de onde vai começar a procurar. Começar da tabela mais fraca (mais chaves estrangeiras) para ir subindo e conseguindo cruzar informações
	INNER JOIN tabela2 	#tabela onde está as colunas que não estão na tabela1 e que vai servir para cruzar informações
	ON tabela1.coluna_comum = tabela2.coluna_comum; #aqui é feito a comparação, normalmente entre chaves, para que todas as colunas que não há na primeira tabela apareça
