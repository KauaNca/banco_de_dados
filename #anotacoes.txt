Quando fazer um banco de dados, tenha certeza de 'amarrar' os dados para que não haja possibilidade de excluir fácil

04/10/2024
BANCO DE DADOS - mySQL

AULA 405 - O QUE É?
SQL - Linguagem de consulta estruturada
É uma linguagem declarativa. -> especifica o dado quer obter ou modificar e não
como sistema deve executar a operação
Por meio dela, pode-se manipular, ler, criar, atualizar, excluir, recuperar,controlar dados por meio do SGBD.

Há subcategorias do SQL
-DDL
-DML
-DCL
-DTL
-DQL

DEPOIS DE UMA OLHADA NO ACID: Atomicidade, consistência, isolamento e durabilidade

Relação entre SQL e MySQL
SQL é a linguagem utilizada para interagir com bancos de dados relacionais, enquanto MySQL é um dos vários 
SGBDRs que implementam essa linguagem.


SQL é a linguagem padrão para gerenciar e manipular bancos de dados relacionais.
MySQL é um sistema de gerenciamento de banco de dados relacional que utiliza SQL para interagir com os dados, 
oferecendo uma solução robusta, escalável e de código aberto para armazenar e gerenciar informações.


O QUE SÃO TABELAS? São unidades de armazenamento que possui um número linhas de dados/de registros.
Armazenamento de mídia -> não há armazenamento, e sim o nome do arquivo digital e sua extensão para que a própria aplicação se
encarregue de procucar e dar o que a pessoa quer.

TIPOS DE DADOS - PRIMITIVOS

Campos de texto
	-TEXT(tamanho variável que armazena uma grande quantidade de caracteres)
	-VARCHAR(tamanho variável que armazena de 0 até 255 caracteres)
	-CHAR(tamanho fixo que armazena de 0 até 255 caracteres)

Campos numéricos
	-INT
	-FLOAT
	-DECIMAL

Campos de data e hora
	-DATE(formato ano,mês,dia)
	-TIME
	-DATETIME


ARQUIVOS DE MÍDIA ARMAZENAMOS A SEU ENDEREÇO PARA QUE QUANDO NECESSÁRIO O BANCO PUXE


CHAR X VARCHAR

char é um comprimento fixo, o que não for utilizado é preenchido com espaços em branco;

**IMAGINE ESSES UNDERLINES COMO ESPAÇOS DE MEMÓRIA

CHAR - 6 posições - Tamanho fixo
JORGE
_ _ _ _ _ _ 

Jorge está ocupando apenas 5, 1 ficará sobrando e será preenchido com espaço em branco.

Desvantagem: Em grandes quantidades desse caso, ocasiona reservas de espaço de forma desnecessário.
Vantagem: Pesquisa mais rápido


VARCHAR - 6 posiçoes - Tamanho variável

Vantagem: Apesar de ter declarado 6 posições, o nome só ocupará 5 e não ocupará um espaço em branco, ou seja,
ocupa o espaço necessário e libera o resto.
Desvantagem: Por ser de tamanho variável possui um meta dado com uma instrução
de finalização do texto, o que produz lentidão em pesquisas, mas imperceptível praticamente.



AULA 412 - RENOMEANDO TABELAS
sintaxe:
rename <nome_da_tabela> to <novo_nome>;


_____________________________


AULA 413 - INCLUINDO,EDITANDO E REMOVENDO COLUNAS DE TABELA (ALTER TABLE)

ADD - Inclusão de coluna na tabela.
EX.:  alter table curso_udemy add column turno char(5);##adicionando coluna

CHANGE - Alteração do nome de uma coluna e de suas propriedades, como o tipo.
EX.: 

alter table curso_udemy change nome_curso n_curso char(60);##alterando
alter table curso_udemy change n_curso nome_curso char(50);##voltando ao normal

**PERCEBA QUE A PARTIR DO NOME DA COLUNA JÁ COMEÇA A MUDANÇA.

DROP - Remover
EX.: alter table curso_udemy drop nome_curso;


________________

AULA 414 - INSERT

EX.: 
insert into curso_udemy(id_curso,nome_curso,imagem_curso, data_cadastro,investimento)
value(1,'ADS','urusei_yatsura.jpg','2024-10-08',1500.82);

--> o primeiro parêntese é as colunas que serão preenchidas, aqui não importa a ordem.
--> o segundo, sim, importa a ordem, pois é os registros de acordo com o primeiro.


________________

AULA 415 - SELECT
sintaxe:
SELECT <colunas> FROM <nome_da_tabela>


FILTROS -> servem para especificar quais registros queremos e formar uma informação 
Where <- onde

SELECT id_curso,nome_curso from tb_curso WHERE investimento <500 and carga-horaria > 30
------->operadores de comparação
= (igual a)
<> ou != (diferente)

______________________________________________________________________________
LIKE (usado para buscar padrões, especialmente dentro de uma coluna textual)
Ex.:    SELECT * FROM cursos WHERE nome_curso LIKE 'Curso%';  -- Cursos que começam com "Curso"

O uso do like vem junto com caracteres curingas
% (indica que pode haver a existência de um conjunto de caracteres antes ou depois)
_ (indica que pode haver a existência de um ou mais caracteres em uma posição ESPECÍFICA do texto)

Exs:
where nome like '%e' <- filtro para nomes que terminam com a letra 'e'. O % indica um conjunto de caracteres antes da letra.
where nome like 'e%' <- começa com a letra e minúscula
where nome like '%a%'<- encontrar nomes que possua a letra a e antes e depois há conjunto de caracteres


where nome like '_riel' <-nomes que tenham riel e um caractere antes.
where nome like '_ru_' <- um caractere antes e depois
where nome like 'I__' <- começa com a letra I e depois há duas letras apenas


E claro, pode fundir

where nome like '%tt_' <-- termina com tt e um caractere qualquer. 
______________________________________________________________________________
BETWEEN ... AND ... (especificar um intervalo de valores)
Ex.:    SELECT * FROM cursos WHERE investimento BETWEEN 200 AND 300

******Pode ser datas também
Ex.:    SELECT * FROM cursos WHERE data_inicio BETWEEN '2018-10-10' AND '2019-06-06'


____________________________________
IN (usado para verificar se um valor está dentro de um conjunto e após confirmar ele trás os registros)
Ex.: 	SELECT *FROM cursos WHERE id_curso in (1,2,3)
	select nome from animes where nota in (8.5);
	**pode colocar com operadores lógicos também
	select nome from anime where nota in (8.5) and genero in...

Há também o NOT IN, que faz o oposto 


_____________________________________


IS NULL(verifica se um campo é nulo)
Ex.: 	SELECT * FROM cursos WHERE data_cadastro IS NULL;

IS NOT NULL
Ex.: 	SELECT * FROM cursos WHERE data_cadastro IS NOT NULL;


IF (especifica uma condição para o select)
Ex.: SELECT IF(investimento > 300, 'Caro', 'Barato') AS preco_categoria FROM cursos;

------->operadores lógicos

AND (todas as comparações devem ser verdadeiras para retornar algo)
OR (pelo menos uma delas devem ser verdadeiras)

Ex.: 	select nome from animes where nota >=8.8 and ano_lancamento > 2012 and numero_episodios > 20 ;
**todas tem que ser verdadeiras

Ex.: 	select nome from animes where numero_episodios between 100 and 300;




A consulta por si só varre todos os campos da tabela


AULA 423 - ORDER BY
...ORDER BY idade ASC, nome DESC (coluna idade na ordem crescente e nome descrescente)
ASC -> valor padrão, ou seja, não precisava colocar idade ASC

**E se forem vários
Simples: a primeira ordem é prioridade

Ex.: select *from animes where nota > 8.5 order by nome desc, nota asc;
->primeiro a coluna nome será ordenada de forma decrescente
->após isso nota



AULA 424 - SELECT - LIMITANDO NÚMERO DE REGISTROS (LIMIT)
->-> vem no final da query

SELECT<colunas(s)>FROM<tabela(s)> WHERE<filtro(s)> ORDER BY <ordenacao> LIMIT n OFFSET a

SINTAXE: LIMIT n ->-> n = número de registros que você quer

SINTAXE COM OFFSET: LIMIT n OFFSET a ->->OFFSET indica qual posição começar

SINTAXE LIMIT E OFFSET JUNTOS: LIMIT a,n ->->primeiro o OFFSET e depois o número LIMIT

OBS.: Se tiver um id, apesar de começar do 1, os registros começam do 0, então

	registro 0 = id 1
	registro 1 = id 2

OFFSET = DESLOCAMENTO

Ex.: SELECT *FROM animes where nota > 8.5 order by nome desc, nota asc limit 5 offset 7; #5 registros, mas começa do registro 7


AULA 425 - FUNÇÕES DE AGREGRAÇÃO
São funções responsaveis por permitir operações aritméticas sobre os 
valores de UMA COLUNA.
1 - MIN(<coluna>) -> retorna o menor valor 
2 - MAX(<coluna>) -> retorna o maior valor
3 - AVG(<coluna>) -> retorna a média
4 - SUM(<coluna>) -> soma todos os valores
5 - CONUT(<coluna>) -> retorna a quantidade de registro que passaram na condição
COUNT(*) <- todos os registros da tabela

Ex.:    select min(nota) from animes; (a menor nota)
	SELECT count(nota) from animes where nota > 8.6	(notas superiores a 8.6)

OBS.: 
select min(nota),nome from animes; (MODO ERRADO)

A consulta SELECT MIN(nota), nome FROM animes; não está funcionando 
porque você está tentando usar uma função agregada (MIN()) ao lado de 
uma coluna não agregada (nome), sem uma cláusula GROUP BY. 
Quando você usa funções agregadas em SQL (como MIN(), MAX(), SUM(), etc.), 
todas as outras colunas que aparecem na consulta devem estar em uma 
cláusula GROUP BY, ou devem ser incluídas em outra função agregada.


SELECT nome, nota FROM animes
WHERE nota = (SELECT MIN(nota) FROM animes); (MODO CORRETO)
--> aqui é uma subconsulta




AULA 427 - GROUP BY
É uma cláusula SQL usada para agrupar linhas que têm valores iguais em colunas
especificadas. Geralmente, é utilizado em conjunto com funções de agregação, 
como COUNT(), SUM(), AVG(), MAX(), e MIN(), 
para realizar operações em grupos de dados.
Imagine que num tabela tenha coluna Interesses e dentro dela tenha os resultados 'Esporte','Música'.
Cada pessoa escolheria um e utilizando o GROUP BY ele disponibiliza os registros de quem escolheu
somente Esporte e somente de Música, separando em dois grupos distintos.

Sintaxe Básica
SELECT coluna1, função_agregação(coluna2)
FROM nome_da_tabela
WHERE condição (opcional)
GROUP BY coluna1;

Ex.: 

SELECT interesses, count(*) AS total
FROM qualquer
GROUP BY produto_id;

->-> ele vai selecionar interesses e contar todos os interesses, mas com GROUP BY,
a contagem será separada de quem escolheu Esporte e de Música

OBSERVAÇÃO: Quando selecionar uma coluna, se ela não estiver na função de agregação,
ela deve estar no GROUP BY

-- Correto
SELECT categoria, COUNT(*) 
FROM produtos 
GROUP BY categoria;

-- Incorreto
SELECT categoria, subcategoria, COUNT(*) 
FROM produtos 
GROUP BY categoria;


AULA 428 - HAVING
É um filtro para o GROUP BY. Imagina aquele exemplo anteriro do interesse e que
só queria os resultados de quem só escolheu Música, seria isso.

***O WHERE NÃO SERVIRIA PARA ISSO? Não. Pense em camadas, o where atuaria nos
resultados da primeira leva, o GROUP BY nos resultados do WHERE e o HAVING na do 
GROUP BY


Ex.: Mostrar Categorias com Receita Total Superior a R$10.000
SELECT categoria, SUM(preco) AS receita_total
FROM produtos
GROUP BY categoria
HAVING SUM(preco) > 10000;


SELECT ano_lancamento,count(*)
FROM animes
WHERE ano_lancamento > 2000
GROUP BY ano_lancamento
HAVING ano_lancamento > 2005;
/*Perceba são 3 filtros, um com where, outro com group by e outro com having*/
/*Seleciona a coluna ano e contar todos da tabela animes onde o ano deve ser maior que 2000,
agrupado pelo ano e que o ano desse agrupamento tenha ano maior que 2005
*/

AULA 429 - UPDATE registros
Pode-se alterar o que já está dentro da tabela

Sintaxe Básica

UPDATE 
	<tabela>
SET
	<coluna> = <valor>,<coluna> = <valor>,<coluna> = <valor>
WHERE 
	<filtro(s)>

->->pode ser de várias colunas de uma vez de apenas um único registro
OBS: AGORA SE QUISER QUE VÁRIOS SEJAM AFETADOS, USE O WHERE

Ex.: 
Um único registro
UPDATE animes 
SET nome = 'Those Obnoxious Aliens', ano_lancamento = 1981 
WHERE nome = "Urusei Yatsura";


Vários
UPDATE animes
SET nota = 8.9
WHERE ano_lancamento > 2000





AULA 430 - DELETE
Não deve ser usado normalmente. Quando vai se excluir algo, apenas 
faz a atualizacao de que aquele dado está inativo.
Se for utilizar, cuidado com o WHERE

Sintaxe Básica
DELETE FROM <tabela> WHERE <filtro(s)>


AULA 431 - RELACIONAMENTOS, CHAVES PRIMÁRIAS E ESTRANGEIRAS

primary key dá a garantia que não have outro registro igual

o id_produto se repetiu pois são imagens do mesmo produto, diferente do
id_imagem

TIPOS DE RELACIONAMENTO

1) Um para muitos(1:N ou 1)

A tabela A só pode ter vários da tabela B, mas a tabela B somente um de A.
Ex.:
Um cliente pode ter vários pedidos, mas um pedido só pode ter um id_cliente.
Um autor pode fazer vários livros, mas o livro só pode ter um autor.
Uma categoria pode ter vários produtos, mas cada produto pertence a uma única categoria.
Cada usuário possui um único perfil, e cada perfil pertence a apenas um usuário.

2) Um para um (1:1)
->Eu falo que é quando uma tabela só existe quando a outra é feita.

->é uma associação entre duas tabelas onde cada registro de uma tabela está relacionado a 
apenas um registro na outra tabela e vice-versa. Isso significa que para cada linha na 
tabela "A", existe no máximo uma linha correspondente na tabela "B", e para cada linha 
na tabela "B", existe no máximo uma linha correspondente na tabela "A".

Ex.:
Uma pessoa só pode ter um passaporte, e o passaporte só pode ser uma única pessoa.
Cada país tem uma única capital, e cada capital pertence a apenas um país.
__________________________________________________


3) Muito para muitos

->->ocorre quando múltiplas instâncias de uma entidade estão associadas 
a múltiplas instâncias de outra entidade. 
Em outras palavras, cada registro da Tabela A pode estar relacionado a vários registros 
da Tabela B, e cada registro da Tabela B pode estar relacionado a vários registros da 
Tabela A.
Ex.:
Um estudante estar em vários cursos e cursos podem ter muitos estudantes
Um autor pode escrever vários livros, e um livro pode ser escrito por vários autores.
Um pedido pode conter vários produtos, e um produto pode estar presente em vários pedidos.

->-> perceba que depende do tipo de contexto que você está colocando no banco de dados.
Autor-Livro em um estava 1:n e neste n:n

Em bancos de dados relacionais, não existe suporte direto para relacionamentos M. 
Para implementá-los, utilizamos uma tabela intermediária (também chamada de tabela 
associativa ou tabela de junção), que quebra o relacionamento M
em dois relacionamentos 1



COMO SABER QUAL FICA COM A CHAVE ESTRANGEIRA?
No 1 para 1, tem que saber qual tabela depende mais da outra, qual for mais,
fica com a chave.
Em pessoa-passaporte, passaporte fica com a chave pois para se ter um passaporte precisa 
de pessoa.

No 1 para muitos, fica no lado dos muitos.

No muitos para muitos, acaba-se criando tabela para juntar as duas chaves estrangeiras de
cada tabela.







AULA 438 A 440 - JOINS
São junções de registros entre tabelas tendo como requisito para que apareça é que as 
tabelas tenham informações que se relacionem. Utiliza-se chaves primárias e estrangeiras para que ocorra a ligação.

Imagine que exista duas tabelas: cliente e pedidos - relacionamento 1:N.
Agora imagina que na tabela cliente tenha 5 registros, no caso, pessoas.
E que em pedidos, 3 registros, no caso, clientes que fizeram pedidos.
Nessa relação, 2 clientes não realizaram pedidos, então, imagina que 3 clientes
realizaram 1 pedido cada.


LEFT JOIN (Junção à esquerda):
Retorna todas as linhas da tabela à esquerda e as correspondências da tabela à direita. 
Se não houver correspondência, valores NULL serão retornados para a tabela da direita.

SELECT * FROM cliente LEFT JOIN pedidos on cliente.id_cliente = pedidos.id_cliente;

Dessa forma, apareceria mais ou menos assim:

tabela cliente - tabela pedido
cliente 1        pedido 1
cliente 2        pedido 2
cliente 3 	 pedido 3
cliente 4 	 null
cliente 5 	 null 

O left join dá prioridade à tabela a sua esquerda, então selecionará todos os clientes e se tiver 
algo em comum, uma correspondência com a tabela à direita. Caso não NULL.



RIGHT JOIN(JUNÇÃO À DIREITA) 
Retorna todas as linhas da tabela à direita e as correspondências da tabela à esquerda. 
Se não houver correspondência, valores NULL serão retornados para a tabela da esquerda.


SELECT * FROM cliente RIGHT JOIN pedidos on cliente.id_cliente = pedidos.id_cliente;

Utilizando o mesmo exemplo, apareceria assim: 

tabela cliente - tabela pedido
cliente 1        pedido 1
cliente 2        pedido 2
cliente 3 	 pedido 3

Como os outros clientes não compraram, eles não se enquadram para aparecer pois
não há relacionamento



INNER JOIN(JUNÇÃO INTERNA)

Esse retorna todas as correspondência que sejam comuns a ambos.
No exemplo, imagina que tabela pedido tenha um pedido 4, mas claro sem
corresponder a nenhum cliente.
No INNER JOIN, ele excluiria todos as não correspondências, então cliente 4 e 5 e
pedido 4 ficariam de foram.

SELECT * FROM cliente INNER JOIN pedidos on cliente.id_cliente = pedidos.id_cliente;
tabela cliente - tabela pedido
cliente 1        pedido 1
cliente 2        pedido 2
cliente 3 	 pedido 3

Se fosse no RIGHT JOIN, pedido 4 apareceria, mas no lado do cliente só teria NULL.


->-> AS CHAVES SERVEM APENAS PARA QUE FAÇA A LIGAÇÃO ENTRE TABELAS E ASSIM
O SELECT PODE TER ACESSO AS COLUNAS DAS DUAS.



AULA 441 - APELIDANDO TABELAS
Colocando apelidos, as querys ficam menos verbosas e com eles pode-se usar em qualquer nível
da consulta.
Ex.:

SELECT * FROM clientes INNER JOIN pedidos
-->->apelidando

SELECT * FROM clientes cl INNER JOIN pedidos pe

cl = tabela cliente
pe = pedidos

E agora pode-se também usar esses apelidos em qualquer parte da consulta

SELECT cl.nome FROM clientes cl INNER JOIN pedidos pe ORDER BY pe















RESULTADOS FIXOS E VARIÁVEIS

Enum x Char x Set

Enum -> somente o que foi passado na criação da tabela poderá ser utilizado e somente um resultado é utilizado
Char 
Set -> há opções, tem que utilizar, mas pode mais de uma 

Ex:

create table teste(
	preferencias set('musica','cinema','esporte')
	situacao enum('ativo','inativo')
	uf char(2)
)

insert into teste (preferencias,situacao,uf) 
values('musica,livro','inativo','DF'), 
('cinema','ativo','MG') #perceba que o set pode mais de uma opção, o enum é mais fechado e o char é fixo



INNER JOIN
Essencial para cruzar informações, para combinar dados de múltiplas tabelas em uma base de dados relacional, 
especialmente quando as tabelas estão relacionadas por chaves primárias e estrangeiras. 

sintaxe:
 	SELECT colunas #colunas que você quer que apareça
	FROM tabela1 	#de onde vai começar a procurar. Começar da tabela mais fraca (mais chaves estrangeiras) para ir subindo e conseguindo cruzar informações
	INNER JOIN tabela2 	#tabela onde está as colunas que não estão na tabela1 e que vai servir para cruzar informações
	ON tabela1.coluna_comum = tabela2.coluna_comum; #aqui é feito a comparação, normalmente entre chaves, para que todas as colunas que não há na primeira tabela apareça





TRIGGERS 

TRIGGERS são gatilhos automáticos que você define quando irá
se ativar após um determinado evento na tabela.
Esses eventos são:

BEFORE INSERT
AFTER INSERT
BEFORE UPDATE
AFTER UPDATE
BEFORE DELETE
AFTER DELETE

Serve para
1 - Atualizacao automática de tabelas, fazendo a máquina trabalhar
2 - validacão de registros, não deixando qualquer dado passar
3 - auditoria, saber quem fez alterações

SINTAXE BÁSICA
CREATE TRIGGER nome_do_trigger
{BEFORE | AFTER} {INSERT | UPDATE | DELETE}
ON nome_da_tabela
FOR EACH ROW
BEGIN
   -- Ações a serem executadas
END;

FOR EACH ROW?
A cláusula FOR EACH ROW em um trigger no MySQL 
significa que o trigger será executado para cada linha 
afetada pela operação 
(seja um INSERT, UPDATE ou DELETE).



ACESSANDO DADOS DA LINHA AFETADA/NOVA
NEW: Utilizado para acessar os valores novos da linha 
(após a modificação, no caso de INSERT ou UPDATE).

OLD: Utilizado para acessar os valores antigos da linha 
(antes da modificação ou exclusão, no caso de UPDATE ou DELETE).


EX.:

CREATE TRIGGER before_usuario_update
BEFORE UPDATE ON usuarios
FOR EACH ROW
BEGIN
   -- Verifica se o email foi alterado

   IF OLD.email != NEW.email THEN
      INSERT INTO log_alteracoes (usuario_id, alteracao, data)
	-- 'NEW.id' se refere ao 'id' da nova linha inserida na tabela 'usuarios'
      VALUES (NEW.id, 'Email alterado', NOW());
   END IF;
END;

OBS: O NEW e OLD está servindo para acessar as colunas da tabela usuarios.



DELIMITER 

ao usar DELIMITER //, para encerrar um bloco de código, como a criação de um trigger, 
basta terminar com // no final, sem precisar explicitamente redefinir o delimitador para ;. 
No entanto, muitas vezes é uma boa prática voltar o delimitador para ; após o bloco, especialmente 
se você estiver executando vários comandos SQL subsequentes que usam o delimitador padrão.

DELIMITER //: Muda o delimitador padrão de ; para //, permitindo a criação de um 
bloco de código como BEGIN...END sem confusão com o delimitador padrão. 
Isso é necessário porque um trigger contém múltiplas instruções SQL.


